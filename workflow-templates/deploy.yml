name: Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Target Environment
        required: true
env:
  APP_NAME: $${REPLACE_APP_NAME}$$
  API_NAME: $${REPLACE_API_NAME}$$
  APP_ENV_NAME: ${{ github.event.inputs.environment }}

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - uses: orthofi/actions-verify-environment@v1
        with:
          environment: ${{ github.event.inputs.environment }}
          token: ${{ secrets.BUILD_GITHUB_TOKEN }}

  beanstalk:
    runs-on: ubuntu-latest
    needs: [init]
    environment: ${{ github.event.inputs.environment }}-beanstalk
    steps:
      - name: Tools
        run: dotnet tool install -g Amazon.ElasticBeanstalk.Tools

      - name: Restore
        uses: dawidd6/action-download-artifact@v2.14.0
        with:
          branch: ${{ github.ref }}
          name: beanstalk
          workflow_conclusion: success
          workflow: build.yml

      - name: Set AWS Role
        id: role
        uses: orthofi/actions-set-build-role@v1
        with:
          production-role: ${{ secrets.PRODUCTION_BUILD_ROLE }}
          dev-role: ${{ secrets.OCKERS_BUILD_ROLE }}
          environment-name: ${{ env.APP_ENV_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ steps.role.outputs.build-role }}

      - name: Deploy
        run: |
          dotnet eb deploy-environment \
            -app ${{ env.API_NAME }} \
            -env ${APP_ENV_NAME}-${{ env.API_NAME }} \
            -pac beanstalk.zip \
            --version-label GHA-${{ github.run_number }} \
            --additional-options 'aws:elasticbeanstalk:application:environment,COMMIT_HASH=${GITHUB_SHA};aws:elasticbeanstalk:application:environment,BUILD_NUMBER=${GITHUB_RUN_NUMBER}' \
            --disable-interactive true \
            --wait true

  lambda:
    runs-on: ubuntu-latest
    needs: [init]
    environment: ${{ github.event.inputs.environment }}-lambda
    steps:
      - name: Tools
        run: dotnet tool install -g Amazon.Lambda.Tools

      - name: Set S3 Bucket
        id: s3-bucket
        uses: orthofi/actions-set-s3-bucket@v1
        with:
          environment-name: ${{ env.APP_ENV_NAME }}

      - name: Set AWS Role
        id: role
        uses: orthofi/actions-set-build-role@v1
        with:
          production-role: ${{ secrets.PRODUCTION_BUILD_ROLE }}
          dev-role: ${{ secrets.OCKERS_BUILD_ROLE }}
          environment-name: ${{ env.APP_ENV_NAME }}

      - name: Configure AWS Deployment Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ steps.role.outputs.build-role }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.ref }}

      - name: Get Image Uri
        id: image
        shell: pwsh
        run: |
          $number = $(ConvertFrom-Json((aws sts get-caller-identity) -join '')).Account
          $tag = "${{ github.ref }}".Replace("refs/heads/", "")
          $uri = "${number}.dkr.ecr.us-east-1.amazonaws.com/${{ env.APP_NAME }}:${tag}"
          Write-Host "::set-output name=uri::$uri"

      - name: Deploy
        shell: pwsh
        env:
          IMAGE_URI: ${{ steps.image.outputs.uri }}
        run: |
          sam deploy -t Lambdas/template.yml `
           --s3-bucket ${{ steps.s3-bucket.outputs.name }} `
           --s3-prefix ${{ env.APP_NAME }}/${{ env.APP_ENV_NAME}}/ `
           --stack-name ${{ env.APP_ENV_NAME }}-$${REPLACE_STACK_NAME}$$ `
           --image-repository "${{ env.IMAGE_URI }}" `
           --parameter-overrides "EnvironmentName=${{ env.APP_ENV_NAME }} ImageUri=${{ env.IMAGE_URI }}" `
           --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND `
           --no-fail-on-empty-changeset
